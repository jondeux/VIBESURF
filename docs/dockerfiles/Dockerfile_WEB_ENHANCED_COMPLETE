# VIBESURF WEB: Complete Production Dockerfile with Integrated Web UI
# Based on Steel Browser's architecture: API + Web UI in single container
# Python 3.12-slim base for optimal AI application compatibility
FROM python:3.12-slim

# HF SPACES STANDARD: Set environment variables for optimal containerized execution
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    LANGUAGE=en_US:en \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8

# VIBESURF CONFIG: Environment variables for VibeSurf configuration
ENV VIBESURF_BACKEND_PORT=7860 \
    BROWSER_USE_LOGGING_LEVEL=info \
    ANONYMIZED_TELEMETRY=false \
    IN_DOCKER=true \
    BROWSER_USE_CALCULATE_COST=false \
    VIBESURF_DEBUG=false \
    # Display configuration for browser automation
    DISPLAY=:99 \
    DBUS_SESSION_BUS_ADDRESS=autolaunch: \
    # Chrome configuration
    CHROME_BIN=/usr/bin/chromium \
    CHROME_PATH=/usr/bin/chromium \
    CHROMIUM_FLAGS="--no-sandbox --disable-dev-shm-usage --disable-gpu"

# SYSTEM DEPENDENCIES: Install required system packages for browser automation
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core system utilities
    git \
    wget \
    curl \
    gnupg \
    ca-certificates \
    unzip \
    build-essential \
    pkg-config \
    # Display and X11 dependencies for headless browser
    xvfb \
    x11vnc \
    dbus-x11 \
    xauth \
    # Chromium browser for automation
    chromium \
    chromium-driver \
    # Font support for better rendering
    fonts-liberation \
    fonts-dejavu-core \
    fonts-freefont-ttf \
    fonts-noto-core \
    fonts-noto-color-emoji \
    fonts-ipafont-gothic \
    fonts-wqy-zenhei \
    fonts-thai-tlwg \
    # Enhanced browser dependencies for stability
    libnss3 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libxrandr2 \
    libxfixes3 \
    libxcomposite1 \
    libasound2 \
    libxdamage1 \
    libxrender1 \
    libgbm1 \
    libxss1 \
    libxtst6 \
    libpangocairo-1.0-0 \
    libcairo-gobject2 \
    libgtk-3-0 \
    libgdk-pixbuf-2.0-0 \
    libdbus-1-3 \
    libx11-xcb1 \
    libxcursor1 \
    libxi6 \
    libfontconfig1 \
    libxkbcommon0 \
    # Additional debugging tools
    procps \
    htop \
    && rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# HF SPACES STANDARD: Create non-root user with UID 1000 for security compliance
RUN if ! id -u 1000 >/dev/null 2>&1; then \
        useradd -m -u 1000 user; \
    else \
        if ! id -u user >/dev/null 2>&1; then \
            usermod -d /home/user -m $(id -un 1000) && \
            usermod -l user $(id -un 1000); \
        fi; \
    fi

USER user
ENV HOME=/home/user \
    PATH=/home/user/.venv/bin:/home/user/.local/bin:$PATH
WORKDIR $HOME/app

# COPY UV: Advanced dependency management
COPY --from=ghcr.io/astral-sh/uv:latest --chown=1000:1000 /uv /usr/local/bin/uv
COPY --from=ghcr.io/astral-sh/uv:latest --chown=1000:1000 /uvx /usr/local/bin/uvx

# SOURCE CODE: Clone VibeSurf repository
RUN git clone https://github.com/vvincent1234/VibeSurf.git . && \
    echo "VibeSurf repository cloned successfully"

# ENHANCED DIRECTORY STRUCTURE: Create comprehensive directory structure with proper permissions
RUN mkdir -p $HOME/app/data \
             $HOME/app/data/profiles \
             $HOME/app/data/workspace \
             $HOME/app/data/database \
             $HOME/app/logs \
             $HOME/app/tmp \
             $HOME/app/web_ui \
             $HOME/.config/vibesurf \
             $HOME/.config/chromium && \
    chmod -R 777 $HOME/app/data $HOME/app/logs $HOME/app/tmp $HOME/app/web_ui $HOME/.config

# DEPENDENCY MANAGEMENT: Install VibeSurf dependencies using uv
RUN uv venv --seed $HOME/.venv && \
    /usr/local/bin/uv pip install --python $HOME/.venv/bin/python --no-cache -e . && \
    echo "VibeSurf dependencies installed successfully"

# CONFIGURATION: Create default .env file from example
RUN cp .env.example .env && \
    echo "Default environment file created"

# WEB UI: Create standalone web interface (NOT Chrome extension)
# This is a simple SPA that uses VibeSurf's REST API via fetch()
RUN mkdir -p $HOME/app/web_ui && cat > $HOME/app/web_ui/index.html <<'HTMLEOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VibeSurf Pro - Enhanced AI Browser Automation</title>
    <link rel="stylesheet" href="/web_ui/style.css">
</head>
<body>
    <!-- Tab Navigation -->
    <nav class="nav-tabs">
        <button class="tab-btn active" data-tab="tasks">üéØ Tasks</button>
        <button class="tab-btn" data-tab="history">üìú History</button>
        <button class="tab-btn" data-tab="browser">üåê Browser</button>
        <button class="tab-btn" data-tab="settings">‚öôÔ∏è Settings</button>
    </nav>

    <div class="container">
        <header>
            <h1>üåä VibeSurf Pro</h1>
            <p>Enhanced AI Browser Automation with Full Control</p>
            <div class="status" id="status">
                <span class="status-indicator" id="status-indicator"></span>
                <span id="status-text">Connecting...</span>
            </div>
        </header>

        <!-- TASKS TAB -->
        <div id="tab-tasks" class="tab-content active">
            <section class="task-input">
                <h2>Submit New Task</h2>
                
                <!-- Feature 4: LLM Profile Selector -->
                <div class="form-row">
                    <div class="form-group">
                        <label for="llm-profile-select">LLM Profile:</label>
                        <div class="input-with-button">
                            <select id="llm-profile-select" class="form-control">
                                <option value="default">Loading...</option>
                            </select>
                            <button onclick="refreshLLMProfiles()" class="btn-icon" title="Refresh Profiles">üîÑ</button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="agent-mode-select">Agent Mode:</label>
                        <select id="agent-mode-select" class="form-control">
                            <option value="thinking">Thinking (Detailed reasoning)</option>
                            <option value="no-thinking">No Thinking (Fast)</option>
                            <option value="flash">Flash (Ultra fast)</option>
                        </select>
                    </div>
                </div>

                <textarea 
                    id="task-input" 
                    placeholder="Enter your task here... (e.g., 'Search for latest AI news and summarize')"
                    rows="4"
                ></textarea>
                
                <!-- Feature 1: File Upload -->
                <div class="file-upload">
                    <input type="file" id="file-input" multiple>
                    <button onclick="uploadFiles()" class="btn-secondary" id="upload-btn">
                        üìé Upload Files
                    </button>
                    <div id="uploaded-files-list"></div>
                </div>

                <div class="controls">
                    <button id="submit-btn" class="btn-primary" onclick="submitTask()">
                        ‚ñ∂Ô∏è Submit Task
                    </button>
                    <button id="pause-btn" class="btn-secondary" onclick="pauseTask()" disabled>
                        ‚è∏Ô∏è Pause
                    </button>
                    <button id="resume-btn" class="btn-secondary" onclick="resumeTask()" disabled>
                        ‚ñ∂Ô∏è Resume
                    </button>
                    <button id="stop-btn" class="btn-danger" onclick="stopTask()" disabled>
                        ‚èπÔ∏è Stop
                    </button>
                </div>
            </section>

            <!-- Feature 3: Detailed Status -->
            <section class="task-status">
                <h2>Task Status</h2>
                <div id="detailed-status" class="status-container">
                    <p class="placeholder">No active task</p>
                </div>
            </section>

            <section class="results">
                <h2>Activity Log</h2>
                <div id="activity-log" class="log-container"></div>
            </section>

            <section class="results">
                <h2>Results</h2>
                <div id="results" class="results-container"></div>
            </section>
        </div>

        <!-- Feature 2: HISTORY TAB -->
        <div id="tab-history" class="tab-content">
            <section>
                <h2>Task History</h2>
                <div class="history-filters">
                    <select id="session-filter" class="form-control" onchange="filterHistory()">
                        <option value="current">Current Session</option>
                        <option value="all">All Sessions</option>
                    </select>
                    <button onclick="loadHistory()" class="btn-secondary">üîÑ Refresh</button>
                    <span id="history-count" class="info-badge">0 tasks</span>
                </div>
                <div id="history-list" class="history-container"></div>
            </section>
        </div>

        <!-- Feature 5: BROWSER TAB -->
        <div id="tab-browser" class="tab-content">
            <section>
                <h2>Browser Control</h2>
                <div class="browser-controls">
                    <button onclick="refreshBrowserTabs()" class="btn-primary">üîÑ Refresh Tabs</button>
                    <button onclick="getActiveTab()" class="btn-secondary">üìç Show Active Tab</button>
                    <span id="tabs-count" class="info-badge">0 tabs</span>
                </div>
                <div id="browser-tabs" class="browser-tabs-container"></div>
            </section>
        </div>

        <!-- Feature 6: SETTINGS TAB -->
        <div id="tab-settings" class="tab-content">
            <section>
                <h2>Settings & Configuration</h2>
                
                <div class="settings-section">
                    <h3>ü§ñ LLM Profiles</h3>
                    <div id="llm-profiles-list" class="profiles-list"></div>
                    <button onclick="showCreateProfileModal()" class="btn-primary">‚ûï Create New Profile</button>
                </div>

                <div class="settings-section">
                    <h3>üîå Available Providers</h3>
                    <div id="providers-list" class="providers-list"></div>
                    <button onclick="loadProviders()" class="btn-secondary">üîÑ Load Providers</button>
                </div>

                <div class="settings-section">
                    <h3>üìÅ Files</h3>
                    <div id="files-list" class="files-list"></div>
                    <button onclick="loadFiles()" class="btn-secondary">üîÑ Load Files</button>
                </div>

                <div class="settings-section">
                    <h3>‚ÑπÔ∏è About</h3>
                    <p><strong>VibeSurf Pro</strong> - Enhanced Web UI v2.0</p>
                    <p><strong>Features:</strong></p>
                    <ul>
                        <li>‚úÖ File Upload & Management</li>
                        <li>‚úÖ Complete Task History</li>
                        <li>‚úÖ Detailed Progress Status</li>
                        <li>‚úÖ LLM Profile Selection</li>
                        <li>‚úÖ Browser Tab Control</li>
                        <li>‚úÖ Full Settings Panel</li>
                    </ul>
                    <div style="margin-top: 15px;">
                        <a href="/docs" target="_blank" class="btn-secondary">üìö API Documentation</a>
                        <a href="https://github.com/vibesurf-ai/VibeSurf" target="_blank" class="btn-secondary">üíª GitHub</a>
                    </div>
                </div>
            </section>
        </div>

        <footer>
            <p>VibeSurf Pro v2.0 - Enhanced Edition | <a href="/docs" target="_blank">API Docs</a></p>
        </footer>
    </div>

    <!-- MODAL: Create LLM Profile -->
    <div id="create-profile-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeCreateProfileModal()">&times;</span>
            <h2>Create LLM Profile</h2>
            <form id="create-profile-form" onsubmit="createLLMProfile(event)">
                <div class="form-group">
                    <label>Profile Name:</label>
                    <input type="text" id="profile-name" required placeholder="e.g., my-gpt4-profile">
                </div>
                <div class="form-group">
                    <label>Provider:</label>
                    <select id="profile-provider" onchange="loadProviderModels()" required>
                        <option value="">Select Provider</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Model:</label>
                    <select id="profile-model" required>
                        <option value="">Select Model First</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>API Endpoint (optional):</label>
                    <input type="text" id="profile-endpoint" placeholder="Leave empty for default">
                </div>
                <div class="form-group">
                    <label>API Key (optional):</label>
                    <input type="password" id="profile-api-key" placeholder="Leave empty to use environment variable">
                </div>
                <button type="submit" class="btn-primary">‚úÖ Create Profile</button>
                <button type="button" onclick="closeCreateProfileModal()" class="btn-secondary">‚ùå Cancel</button>
            </form>
        </div>
    </div>

    <!-- MODAL: Task Details -->
    <div id="task-details-modal" class="modal">
        <div class="modal-content large">
            <span class="close" onclick="closeTaskDetailsModal()">&times;</span>
            <h2>Task Details</h2>
            <div id="task-details-content"></div>
        </div>
    </div>

    <script src="/web_ui/app.js"></script>
</body>
</html>

HTMLEOF

# WEB UI CSS
RUN cat > $HOME/app/web_ui/style.css <<'CSSEOF'
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 0;
}

/* Tab Navigation */
.nav-tabs {
    background: #fff;
    display: flex;
    border-bottom: 2px solid #e0e0e0;
    padding: 0;
}

.tab-btn {
    flex: 1;
    padding: 15px 20px;
    border: none;
    background: white;
    cursor: pointer;
    font-size: 1em;
    transition: all 0.3s;
    border-bottom: 3px solid transparent;
}

.tab-btn:hover {
    background: #f5f5f5;
}

.tab-btn.active {
    background: white;
    border-bottom-color: #667eea;
    color: #667eea;
    font-weight: 600;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

/* Container */
.container {
    max-width: 1400px;
    margin: 0 auto;
    background: white;
    min-height: calc(100vh - 50px);
}

header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    text-align: center;
}

header h1 {
    font-size: 2.5em;
    margin-bottom: 10px;
}

header p {
    opacity: 0.9;
    font-size: 1.1em;
}

.status {
    margin-top: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

.status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #ffd700;
    animation: pulse 2s infinite;
}

.status-indicator.connected {
    background: #4caf50;
}

.status-indicator.error {
    background: #f44336;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

main, section {
    padding: 20px 30px;
}

section {
    margin-bottom: 20px;
}

h2 {
    color: #333;
    margin-bottom: 15px;
    font-size: 1.5em;
}

h3 {
    color: #555;
    margin-bottom: 10px;
    font-size: 1.2em;
}

/* Form Controls */
.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 15px;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #555;
}

.form-control {
    width: 100%;
    padding: 10px;
    border: 2px solid #e0e0e0;
    border-radius: 6px;
    font-size: 1em;
    transition: border-color 0.3s;
}

.form-control:focus {
    outline: none;
    border-color: #667eea;
}

.input-with-button {
    display: flex;
    gap: 5px;
}

.input-with-button .form-control {
    flex: 1;
}

.btn-icon {
    padding: 10px;
    min-width: 45px;
}

textarea {
    width: 100%;
    padding: 15px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1em;
    font-family: inherit;
    resize: vertical;
    transition: border-color 0.3s;
    margin-bottom: 15px;
}

textarea:focus {
    outline: none;
    border-color: #667eea;
}

/* File Upload */
.file-upload {
    margin: 15px 0;
}

#file-input {
    margin-bottom: 10px;
}

#uploaded-files-list {
    margin-top: 10px;
}

.uploaded-file {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 12px;
    background: #f5f5f5;
    border-radius: 6px;
    margin-bottom: 8px;
}

.uploaded-file button {
    padding: 4px 8px;
    font-size: 0.9em;
}

/* Buttons */
.controls {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    margin-bottom: 20px;
}

button {
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    font-size: 1em;
    cursor: pointer;
    transition: all 0.3s;
    font-weight: 500;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.btn-primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
}

.btn-secondary {
    background: #e0e0e0;
    color: #333;
}

.btn-secondary:hover:not(:disabled) {
    background: #d0d0d0;
}

.btn-danger {
    background: #f44336;
    color: white;
}

.btn-danger:hover:not(:disabled) {
    background: #d32f2f;
}

button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Status & Progress */
.status-container, .task-status {
    background: #f9f9f9;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
}

.status-card {
    background: white;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid #667eea;
}

.status-row {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    border-bottom: 1px solid #f0f0f0;
}

.status-row:last-child {
    border-bottom: none;
}

.status-badge {
    padding: 4px 12px;
    border-radius: 12px;
    font-size: 0.9em;
    font-weight: 500;
}

.status-badge.running, .status-badge.executing {
    background: #2196f3;
    color: white;
}

.status-badge.completed, .status-badge.finished {
    background: #4caf50;
    color: white;
}

.status-badge.failed, .status-badge.error {
    background: #f44336;
    color: white;
}

.status-badge.paused {
    background: #ff9800;
    color: white;
}

.progress-bar {
    width: 100%;
    height: 20px;
    background: #e0e0e0;
    border-radius: 10px;
    overflow: hidden;
    margin: 10px 0;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    transition: width 0.5s ease;
}

/* Activity Log & Results */
.log-container, .results-container {
    background: #f5f5f5;
    border-radius: 8px;
    padding: 20px;
    min-height: 200px;
    max-height: 400px;
    overflow-y: auto;
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
}

.log-entry {
    padding: 8px;
    margin-bottom: 8px;
    background: white;
    border-radius: 4px;
    border-left: 4px solid #667eea;
}

.log-entry.error {
    border-left-color: #f44336;
}

.log-entry.success {
    border-left-color: #4caf50;
}

.log-timestamp {
    color: #666;
    font-size: 0.85em;
    margin-right: 10px;
}

.placeholder {
    text-align: center;
    color: #999;
    padding: 40px;
}

/* History */
.history-filters {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    align-items: center;
}

.history-container {
    max-height: 600px;
    overflow-y: auto;
}

.history-item {
    background: white;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.history-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    align-items: center;
}

.task-id {
    font-family: monospace;
    background: #f0f0f0;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.9em;
}

.task-time {
    font-size: 0.9em;
    color: #666;
}

.history-body {
    margin: 10px 0;
}

.history-body p {
    margin-bottom: 5px;
}

.history-actions {
    display: flex;
    gap: 8px;
    margin-top: 10px;
}

.history-actions button {
    padding: 6px 12px;
    font-size: 0.9em;
}

/* Browser Tabs */
.browser-controls {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    align-items: center;
}

.browser-tabs-container {
    max-height: 600px;
    overflow-y: auto;
}

.browser-tab {
    background: white;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 15px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    transition: all 0.3s;
}

.browser-tab:hover {
    box-shadow: 0 4px 10px rgba(0,0,0,0.15);
    transform: translateY(-2px);
}

.browser-tab.active {
    border-left: 4px solid #4caf50;
}

.tab-index {
    width: 35px;
    height: 35px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    flex-shrink: 0;
}

.tab-info {
    flex: 1;
}

.tab-title {
    font-weight: 600;
    margin-bottom: 4px;
}

.tab-url {
    font-size: 0.9em;
    color: #666;
    word-break: break-all;
}

.active-badge {
    background: #4caf50;
    color: white;
    padding: 4px 12px;
    border-radius: 12px;
    font-size: 0.85em;
    font-weight: 500;
}

/* Settings */
.settings-section {
    background: #f9f9f9;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 8px;
}

.settings-section ul {
    margin-left: 20px;
    line-height: 1.8;
}

.profile-item, .provider-item, .file-item {
    padding: 15px;
    background: white;
    margin-bottom: 10px;
    border-radius: 6px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.profile-info, .provider-info {
    flex: 1;
}

.profile-info strong {
    display: block;
    margin-bottom: 4px;
    color: #333;
}

.profile-info span, .provider-info span {
    color: #666;
    font-size: 0.9em;
}

.profile-actions {
    display: flex;
    gap: 8px;
}

.profile-actions button {
    padding: 6px 12px;
    font-size: 0.9em;
}

.profiles-list, .providers-list, .files-list {
    max-height: 400px;
    overflow-y: auto;
}

/* Info Badge */
.info-badge {
    background: #667eea;
    color: white;
    padding: 6px 12px;
    border-radius: 12px;
    font-size: 0.9em;
    font-weight: 500;
}

/* Modals */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.6);
    align-items: center;
    justify-content: center;
}

.modal.active {
    display: flex;
}

.modal-content {
    background: white;
    padding: 30px;
    border-radius: 12px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 10px 40px rgba(0,0,0,0.3);
}

.modal-content.large {
    max-width: 800px;
}

.modal-content h2 {
    margin-bottom: 20px;
}

.close {
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    color: #999;
    transition: color 0.3s;
}

.close:hover {
    color: #333;
}

/* Footer */
footer {
    background: #f5f5f5;
    padding: 20px;
    text-align: center;
    color: #666;
    border-top: 1px solid #e0e0e0;
}

footer a {
    color: #667eea;
    text-decoration: none;
    margin: 0 10px;
}

footer a:hover {
    text-decoration: underline;
}

/* Responsive */
@media (max-width: 768px) {
    body {
        padding: 0;
    }
    
    header h1 {
        font-size: 2em;
    }
    
    .form-row {
        grid-template-columns: 1fr;
    }
    
    .controls, .history-filters, .browser-controls {
        flex-direction: column;
    }
    
    button {
        width: 100%;
    }
    
    .tab-btn {
        font-size: 0.9em;
        padding: 12px 10px;
    }
    
    .modal-content {
        width: 95%;
        padding: 20px;
    }
    
    .history-actions {
        flex-direction: column;
    }
    
    .profile-item, .browser-tab {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .profile-actions {
        width: 100%;
        margin-top: 10px;
    }
}

/* Scrollbar Styling */
::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #555;
}

CSSEOF

# WEB UI JavaScript
RUN cat > $HOME/app/web_ui/app.js <<'JSEOF'
// VibeSurf Pro - Enhanced Web UI v2.0
// Complete implementation with all 6 features

// Global State
let currentSessionId = null;
let currentTaskId = null;
let activityPolling = null;
let statusPolling = null;
let uploadedFilePaths = [];
let availableProfiles = [];
let availableProviders = [];

// Initialize on page load
document.addEventListener('DOMContentLoaded', async () => {
    await checkBackendStatus();
    await generateSessionId();
    await loadLLMProfiles();
    setupTabNavigation();
    setupFileUpload();
    
    // Start polling
    setInterval(pollDetailedStatus, 3000);
});

// ============= FEATURE: TAB NAVIGATION =============
function setupTabNavigation() {
    const tabBtns = document.querySelectorAll('.tab-btn');
    tabBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const tabName = btn.dataset.tab;
            switchTab(tabName);
        });
    });
}

function switchTab(tabName) {
    // Update buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.tab === tabName) btn.classList.add('active');
    });
    
    // Update content
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    const activeTab = document.getElementById('tab-' + tabName);
    if (activeTab) activeTab.classList.add('active');
    
    // Load tab-specific data
    if (tabName === 'history') loadHistory();
    if (tabName === 'browser') refreshBrowserTabs();
    if (tabName === 'settings') loadSettings();
}

// ============= CORE: BACKEND CONNECTION =============
async function checkBackendStatus() {
    try {
        const response = await fetch('/health');
        if (response.ok) {
            updateStatus('connected', 'Backend Connected');
        } else {
            updateStatus('error', 'Backend Error');
        }
    } catch (error) {
        updateStatus('error', 'Backend Offline');
        console.error('Health check failed:', error);
    }
}

async function generateSessionId() {
    try {
        const response = await fetch('/generate-session-id');
        const data = await response.json();
        currentSessionId = data.session_id;
        addLog('Session initialized: ' + currentSessionId);
    } catch (error) {
        addLog('Failed to generate session ID', 'error');
        console.error('Session generation failed:', error);
    }
}

// ============= FEATURE 1: FILE UPLOAD =============
function setupFileUpload() {
    const fileInput = document.getElementById('file-input');
    fileInput.addEventListener('change', () => {
        const files = Array.from(fileInput.files);
        if (files.length > 0) {
            addLog(\`\${files.length} file(s) selected for upload\`);
        }
    });
}

async function uploadFiles() {
    const fileInput = document.getElementById('file-input');
    const files = fileInput.files;
    
    if (files.length === 0) {
        alert('Please select files first');
        return;
    }
    
    const uploadBtn = document.getElementById('upload-btn');
    uploadBtn.disabled = true;
    uploadBtn.textContent = '‚è≥ Uploading...';
    
    try {
        const formData = new FormData();
        for (const file of files) {
            formData.append('files', file);
        }
        
        const response = await fetch('/api/files/upload', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            const data = await response.json();
            uploadedFilePaths = data.file_paths || [];
            
            addLog(\`Uploaded \${files.length} file(s) successfully\`, 'success');
            displayUploadedFiles(data.files || []);
            fileInput.value = ''; // Clear input
        } else {
            throw new Error(await response.text());
        }
    } catch (error) {
        addLog('File upload failed: ' + error.message, 'error');
    } finally {
        uploadBtn.disabled = false;
        uploadBtn.textContent = 'üìé Upload Files';
    }
}

function displayUploadedFiles(files) {
    const container = document.getElementById('uploaded-files-list');
    if (files.length === 0) {
        container.innerHTML = '';
        return;
    }
    
    container.innerHTML = files.map(file => \`
        <div class="uploaded-file">
            <span>‚úì \${file.filename || file.file_id}</span>
            <button onclick="deleteFile('\${file.file_id}')" class="btn-danger">üóëÔ∏è</button>
        </div>
    \`).join('');
}

async function deleteFile(fileId) {
    try {
        const response = await fetch(\`/api/files/\${fileId}\`, { method: 'DELETE' });
        if (response.ok) {
            addLog('File deleted', 'success');
            // Reload files
            const fileInput = document.getElementById('file-input');
            fileInput.value = '';
            document.getElementById('uploaded-files-list').innerHTML = '';
            uploadedFilePaths = [];
        }
    } catch (error) {
        addLog('Delete failed: ' + error.message, 'error');
    }
}

// ============= FEATURE 4: LLM PROFILE SELECTOR =============
async function loadLLMProfiles() {
    try {
        const response = await fetch('/api/config/llm-profiles');
        const profiles = await response.json();
        availableProfiles = profiles;
        
        const select = document.getElementById('llm-profile-select');
        select.innerHTML = profiles.map(p => 
            \`<option value="\${p.profile_name}">\${p.profile_name}</option>\`
        ).join('');
        
        // Get default
        try {
            const defaultResp = await fetch('/api/config/llm-profiles/default/current');
            if (defaultResp.ok) {
                const def = await defaultResp.json();
                select.value = def.profile_name;
            }
        } catch (e) {}
    } catch (error) {
        console.error('Failed to load profiles:', error);
        document.getElementById('llm-profile-select').innerHTML = 
            '<option value="default">default</option>';
    }
}

async function refreshLLMProfiles() {
    await loadLLMProfiles();
    addLog('LLM profiles refreshed');
}

// ============= CORE: TASK SUBMISSION =============
async function submitTask() {
    const taskInput = document.getElementById('task-input');
    const taskDescription = taskInput.value.trim();
    
    if (!taskDescription) {
        alert('Please enter a task');
        return;
    }
    
    if (!currentSessionId) await generateSessionId();
    
    const submitBtn = document.getElementById('submit-btn');
    submitBtn.disabled = true;
    submitBtn.textContent = '‚è≥ Submitting...';
    
    try {
        const llmProfileName = document.getElementById('llm-profile-select').value;
        const agentMode = document.getElementById('agent-mode-select').value;
        
        const taskRequest = {
            session_id: currentSessionId,
            task_description: taskDescription,
            llm_profile_name: llmProfileName,
            agent_mode: agentMode
        };
        
        if (uploadedFilePaths.length > 0) {
            taskRequest.upload_files_path = uploadedFilePaths.join(',');
        }
        
        const response = await fetch('/api/tasks/submit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(taskRequest)
        });
        
        if (response.ok) {
            const data = await response.json();
            currentTaskId = data.task_id;
            addLog('Task submitted successfully!', 'success');
            addLog('Task ID: ' + currentTaskId);
            
            taskInput.value = '';
            uploadedFilePaths = [];
            document.getElementById('uploaded-files-list').innerHTML = '';
            
            document.getElementById('pause-btn').disabled = false;
            document.getElementById('stop-btn').disabled = false;
            
            startActivityPolling();
        } else {
            const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));
            addLog('Task failed: ' + (errorData.detail || errorData.message), 'error');
        }
    } catch (error) {
        addLog('Error: ' + error.message, 'error');
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = '‚ñ∂Ô∏è Submit Task';
    }
}

async function pauseTask() {
    await sendControl('/api/tasks/pause', 'Task paused');
    document.getElementById('resume-btn').disabled = false;
    document.getElementById('pause-btn').disabled = true;
}

async function resumeTask() {
    await sendControl('/api/tasks/resume', 'Task resumed');
    document.getElementById('pause-btn').disabled = false;
    document.getElementById('resume-btn').disabled = true;
}

async function stopTask() {
    await sendControl('/api/tasks/stop', 'Task stopped');
    stopActivityPolling();
    document.getElementById('pause-btn').disabled = true;
    document.getElementById('resume-btn').disabled = true;
    document.getElementById('stop-btn').disabled = true;
}

async function sendControl(endpoint, successMessage) {
    try {
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ reason: successMessage })
        });
        
        if (response.ok) {
            addLog(successMessage, 'success');
        } else {
            const errorData = await response.json().catch(() => ({ detail: 'Failed' }));
            addLog('Control failed: ' + (errorData.detail || ''), 'error');
        }
    } catch (error) {
        addLog('Error: ' + error.message, 'error');
    }
}

// ============= FEATURE 3: DETAILED STATUS =============
async function pollDetailedStatus() {
    if (!currentTaskId) return;
    
    try {
        const response = await fetch('/api/tasks/detailed-status');
        if (response.ok) {
            const status = await response.json();
            updateDetailedStatus(status);
        }
    } catch (error) {
        console.error('Status polling error:', error);
    }
}

function updateDetailedStatus(status) {
    const container = document.getElementById('detailed-status');
    
    if (!status || !status.has_active_task) {
        container.innerHTML = '<p class="placeholder">No active task</p>';
        return;
    }
    
    const progress = status.progress || 0;
    const currentAction = status.current_action || 'Processing...';
    
    container.innerHTML = \`
        <div class="status-card">
            <div class="status-row">
                <span>Task ID:</span>
                <span>\${status.task_id?.slice(0, 8) || 'N/A'}</span>
            </div>
            <div class="status-row">
                <span>Status:</span>
                <span class="status-badge \${status.status}">\${status.status}</span>
            </div>
            <div class="status-row">
                <span>Progress:</span>
                <span>\${progress}%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: \${progress}%"></div>
            </div>
            <div class="status-row">
                <span>Current Action:</span>
                <span>\${currentAction}</span>
            </div>
        </div>
    \`;
}

// ============= ACTIVITY POLLING =============
function startActivityPolling() {
    if (activityPolling) return;
    activityPolling = setInterval(async () => {
        try {
            const response = await fetch(\`/api/activity/sessions/\${currentSessionId}/latest_activity\`);
            if (response.ok) {
                const activities = await response.json();
                if (activities && activities.length > 0) {
                    activities.forEach(activity => {
                        addLog(\`[\${activity.agent_name}] \${activity.action}: \${activity.result || ''}\`);
                    });
                }
            }
        } catch (error) {
            console.error('Activity polling error:', error);
        }
    }, 2000);
}

function stopActivityPolling() {
    if (activityPolling) {
        clearInterval(activityPolling);
        activityPolling = null;
    }
}

// ============= FEATURE 2: TASK HISTORY =============
async function loadHistory() {
    try {
        const sessionFilter = document.getElementById('session-filter').value;
        let tasks = [];
        
        if (sessionFilter === 'current') {
            const response = await fetch(\`/api/activity/sessions/\${currentSessionId}/tasks\`);
            tasks = await response.json();
        } else {
            const response = await fetch('/api/activity/tasks');
            tasks = await response.json();
        }
        
        displayHistory(tasks);
        document.getElementById('history-count').textContent = \`\${tasks.length} tasks\`;
    } catch (error) {
        addLog('Failed to load history: ' + error.message, 'error');
    }
}

function displayHistory(tasks) {
    const container = document.getElementById('history-list');
    
    if (!tasks || tasks.length === 0) {
        container.innerHTML = '<p class="placeholder">No task history</p>';
        return;
    }
    
    container.innerHTML = tasks.map(task => \`
        <div class="history-item">
            <div class="history-header">
                <span class="task-id">\${task.task_id.slice(0, 8)}</span>
                <span class="status-badge \${task.status}">\${task.status}</span>
                <span class="task-time">\${new Date(task.created_at).toLocaleString()}</span>
            </div>
            <div class="history-body">
                <p><strong>Task:</strong> \${task.task_description || 'N/A'}</p>
                \${task.result ? \`<p><strong>Result:</strong> \${task.result.slice(0, 200)}...</p>\` : ''}
            </div>
            <div class="history-actions">
                <button onclick="viewTaskDetails('\${task.task_id}')" class="btn-secondary">üìã Details</button>
            </div>
        </div>
    \`).join('');
}

function filterHistory() {
    loadHistory();
}

async function viewTaskDetails(taskId) {
    try {
        const response = await fetch(\`/api/activity/\${taskId}\`);
        const task = await response.json();
        
        document.getElementById('task-details-content').innerHTML = \`
            <pre>\${JSON.stringify(task, null, 2)}</pre>
        \`;
        document.getElementById('task-details-modal').classList.add('active');
    } catch (error) {
        alert('Failed to load task details: ' + error.message);
    }
}

function closeTaskDetailsModal() {
    document.getElementById('task-details-modal').classList.remove('active');
}

// ============= FEATURE 5: BROWSER TAB VIEWER =============
async function refreshBrowserTabs() {
    try {
        const response = await fetch('/api/browser/all-tabs');
        const tabs = await response.json();
        
        displayBrowserTabs(tabs.tabs || tabs || []);
        document.getElementById('tabs-count').textContent = \`\${(tabs.tabs || tabs || []).length} tabs\`;
    } catch (error) {
        addLog('Failed to get browser tabs: ' + error.message, 'error');
        document.getElementById('browser-tabs').innerHTML = 
            '<p class="placeholder">Failed to load tabs. Browser may not be running.</p>';
    }
}

function displayBrowserTabs(tabs) {
    const container = document.getElementById('browser-tabs');
    
    if (!tabs || tabs.length === 0) {
        container.innerHTML = '<p class="placeholder">No browser tabs open</p>';
        return;
    }
    
    container.innerHTML = tabs.map((tab, index) => \`
        <div class="browser-tab \${tab.is_active ? 'active' : ''}">
            <div class="tab-index">\${index + 1}</div>
            <div class="tab-info">
                <div class="tab-title">\${tab.title || 'Untitled'}</div>
                <div class="tab-url">\${tab.url || 'about:blank'}</div>
            </div>
            \${tab.is_active ? '<span class="active-badge">Active</span>' : ''}
        </div>
    \`).join('');
}

async function getActiveTab() {
    try {
        const response = await fetch('/api/browser/active-tab');
        const tab = await response.json();
        addLog(\`Active tab: \${tab.title || 'Unknown'} (\${tab.url || 'N/A'})\`, 'success');
    } catch (error) {
        addLog('Failed to get active tab: ' + error.message, 'error');
    }
}

// ============= FEATURE 6: SETTINGS PANEL =============
async function loadSettings() {
    await loadLLMProfilesList();
    await loadProviders();
    await loadFiles();
}

async function loadLLMProfilesList() {
    try {
        const response = await fetch('/api/config/llm-profiles');
        const profiles = await response.json();
        
        const container = document.getElementById('llm-profiles-list');
        container.innerHTML = profiles.map(profile => \`
            <div class="profile-item">
                <div class="profile-info">
                    <strong>\${profile.profile_name}</strong>
                    <span>\${profile.model_name || 'Unknown Model'}</span>
                </div>
                <div class="profile-actions">
                    <button onclick="deleteProfile('\${profile.profile_name}')" class="btn-danger">üóëÔ∏è Delete</button>
                </div>
            </div>
        \`).join('');
    } catch (error) {
        console.error('Failed to load profiles list:', error);
    }
}

async function loadProviders() {
    try {
        const response = await fetch('/api/config/providers');
        const providers = await response.json();
        availableProviders = providers;
        
        const container = document.getElementById('providers-list');
        container.innerHTML = Object.entries(providers).map(([name, info]) => \`
            <div class="provider-item">
                <div class="provider-info">
                    <strong>\${name}</strong>
                    <span>\${info.endpoint || 'N/A'}</span>
                </div>
            </div>
        \`).join('');
        
        // Also populate modal dropdown
        const providerSelect = document.getElementById('profile-provider');
        providerSelect.innerHTML = '<option value="">Select Provider</option>' +
            Object.keys(providers).map(name => \`<option value="\${name}">\${name}</option>\`).join('');
    } catch (error) {
        console.error('Failed to load providers:', error);
    }
}

async function loadFiles() {
    try {
        const response = await fetch('/api/files');
        const files = await response.json();
        
        const container = document.getElementById('files-list');
        if (!files || files.length === 0) {
            container.innerHTML = '<p class="placeholder">No uploaded files</p>';
            return;
        }
        
        container.innerHTML = files.map(file => \`
            <div class="file-item">
                <span>\${file.filename || file.file_id}</span>
                <button onclick="deleteFile('\${file.file_id}')" class="btn-danger">üóëÔ∏è</button>
            </div>
        \`).join('');
    } catch (error) {
        console.error('Failed to load files:', error);
    }
}

function showCreateProfileModal() {
    document.getElementById('create-profile-modal').classList.add('active');
    if (availableProviders.length === 0) loadProviders();
}

function closeCreateProfileModal() {
    document.getElementById('create-profile-modal').classList.remove('active');
    document.getElementById('create-profile-form').reset();
}

async function loadProviderModels() {
    const provider = document.getElementById('profile-provider').value;
    if (!provider) return;
    
    try {
        const response = await fetch(\`/api/config/providers/\${provider}/models\`);
        const models = await response.json();
        
        const modelSelect = document.getElementById('profile-model');
        modelSelect.innerHTML = models.map(m => \`<option value="\${m}">\${m}</option>\`).join('');
    } catch (error) {
        console.error('Failed to load models:', error);
    }
}

async function createLLMProfile(event) {
    event.preventDefault();
    
    const profileData = {
        profile_name: document.getElementById('profile-name').value,
        provider_name: document.getElementById('profile-provider').value,
        model_name: document.getElementById('profile-model').value,
        api_endpoint: document.getElementById('profile-endpoint').value || undefined,
        api_key: document.getElementById('profile-api-key').value || undefined
    };
    
    try {
        const response = await fetch('/api/config/llm-profiles', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(profileData)
        });
        
        if (response.ok) {
            addLog('Profile created successfully', 'success');
            closeCreateProfileModal();
            await loadLLMProfiles();
            await loadLLMProfilesList();
        } else {
            const error = await response.text();
            addLog('Failed to create profile: ' + error, 'error');
        }
    } catch (error) {
        addLog('Error creating profile: ' + error.message, 'error');
    }
}

async function deleteProfile(profileName) {
    if (!confirm(\`Delete profile "\${profileName}"?\`)) return;
    
    try {
        const response = await fetch(\`/api/config/llm-profiles/\${profileName}\`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            addLog('Profile deleted', 'success');
            await loadLLMProfiles();
            await loadLLMProfilesList();
        } else {
            throw new Error(await response.text());
        }
    } catch (error) {
        addLog('Delete failed: ' + error.message, 'error');
    }
}

// ============= UI HELPERS =============
function updateStatus(state, text) {
    const indicator = document.getElementById('status-indicator');
    const statusText = document.getElementById('status-text');
    indicator.className = 'status-indicator ' + state;
    statusText.textContent = text;
}

function addLog(message, type = 'info') {
    const logContainer = document.getElementById('activity-log');
    const entry = document.createElement('div');
    entry.className = 'log-entry ' + type;
    
    const timestamp = new Date().toLocaleTimeString();
    entry.innerHTML = \`<span class="log-timestamp">\${timestamp}</span>\${message}\`;
    
    logContainer.appendChild(entry);
    logContainer.scrollTop = logContainer.scrollHeight;
}

// Keyboard shortcuts
document.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.key === 'Enter') {
        const activeTab = document.querySelector('.tab-content.active');
        if (activeTab && activeTab.id === 'tab-tasks') {
            submitTask();
        }
    }
});

JSEOF

# BACKEND INTEGRATION: Add web UI routes to FastAPI
RUN cat > $HOME/app/web_ui_routes.py <<'EOF'
"""
VibeSurf Web UI Routes - Serve standalone web interface
"""
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, RedirectResponse
from pathlib import Path
import os

def setup_web_ui_routes(app: FastAPI):
    """Setup routes to serve web UI"""
    
    web_ui_dir = Path(__file__).parent / "web_ui"
    
    if not web_ui_dir.exists():
        print("‚ö†Ô∏è Web UI directory not found, skipping web UI setup")
        return
    
    # Mount static files
    app.mount("/web_ui", StaticFiles(directory=str(web_ui_dir)), name="web_ui")
    
    # Root redirect to web UI
    @app.get("/", include_in_schema=False)
    async def root():
        return RedirectResponse(url="/web_ui/index.html")
    
    print("‚úÖ Web UI routes configured")
    print("   - Access UI at: http://localhost:7860/")
    print("   - API docs at: http://localhost:7860/docs")

EOF

# PATCH BACKEND: Integrate web UI into main.py
RUN cat > $HOME/app/patch_backend.py <<'EOF'
"""
Patch main.py to add web UI routes
"""
from pathlib import Path
import re

main_path = Path("vibe_surf/backend/main.py")
content = main_path.read_text()

# Check if already patched
if "web_ui_routes" in content:
    print("‚úÖ Backend already patched")
    exit(0)

# Find FastAPI app creation
app_match = re.search(r'app = FastAPI\([^)]*\)', content, re.DOTALL)
if not app_match:
    print("‚ùå Could not find FastAPI app creation")
    exit(1)

# Insert web UI setup after app creation
insert_pos = app_match.end()
next_line = content.find('\n', insert_pos)

web_ui_code = """

# Setup Web UI
try:
    import sys
    from pathlib import Path
    sys.path.insert(0, str(Path(__file__).parent.parent.parent))
    from web_ui_routes import setup_web_ui_routes
    setup_web_ui_routes(app)
except Exception as e:
    print(f"‚ö†Ô∏è Web UI setup failed: {e}")
    print("API endpoints still available at /docs")
"""

content = content[:next_line] + web_ui_code + content[next_line:]
main_path.write_text(content)
print("‚úÖ Backend patched successfully")
EOF

RUN /home/user/.venv/bin/python patch_backend.py

# STARTUP SCRIPT: Comprehensive startup with web UI support
RUN cat > $HOME/app/start.sh <<'EOF'
#!/bin/bash
set -e

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "=== VibeSurf Web - HuggingFace Spaces Startup ==="

# Initialize services
cleanup() {
    pkill chromium || true
    pkill dbus-daemon || true
    pkill Xvfb || true
    sleep 1
}

start_xvfb() {
    log "Starting Xvfb..."
    Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &
    export DISPLAY=:99
    sleep 2
}

init_dbus() {
    log "Initializing DBus..."
    dbus-daemon --session --fork || true
    sleep 1
}

# Environment setup
if [ -n "$SPACE_HOST" ]; then
    export API_BASE_URL="https://$SPACE_HOST"
    log "Using HF Spaces URL: $API_BASE_URL"
elif [ -n "$HF_SPACE_HOST" ]; then
    export API_BASE_URL="https://$HF_SPACE_HOST"
    log "Using HF Spaces URL: $API_BASE_URL"
else
    export API_BASE_URL="http://localhost:7860"
    log "Using local URL: $API_BASE_URL"
fi

cleanup
start_xvfb
init_dbus

# BROWSER CONFIGURATION: Set browser paths for VibeSurf
export BROWSER_EXECUTION_PATH=/usr/bin/chromium
export BROWSER_USER_DATA=$HOME/app/data/profiles
export VIBESURF_WORKSPACE=$HOME/app/data/workspace
export VIBESURF_DATABASE_URL="sqlite+aiosqlite:///$HOME/app/data/database/vibesurf.db"

log "Browser configuration:"
log "  - Execution path: $BROWSER_EXECUTION_PATH"
log "  - User data: $BROWSER_USER_DATA"
log "  - Workspace: $VIBESURF_WORKSPACE"
log "  - Database: $VIBESURF_DATABASE_URL"

log "Starting VibeSurf with Web UI on 0.0.0.0:7860..."
log "Endpoints:"
log "  - / (Web UI)"
log "  - /docs (API Documentation)"
log "  - /api/* (API Endpoints)"

source $HOME/.venv/bin/activate
cd $HOME/app

/home/user/.venv/bin/uvicorn vibe_surf.backend.main:app \
    --host 0.0.0.0 \
    --port 7860 \
    --log-level info
EOF

RUN chmod +x $HOME/app/start.sh

# HF SPACES PORT: Expose port for external access
EXPOSE 7860

# HEALTH MONITORING: Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:7860/health || exit 1

# STARTUP
CMD ["./start.sh"]
